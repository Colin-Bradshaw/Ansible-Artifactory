- hosts: localhost
  connection: local
  gather_facts: False
  tags: provisioning

  vars:
    
    instance_type: t2.medium
    image: ami-0233c2d874b811deb
    project_name: AnsibleArtifactory
    env: testing
    app_code_user: "ubuntu"
    hoststring: "ansible_ssh_user=ubuntu ansible_ssh_private_key_file=../aws-private.pem"
    hostpath: "./hosts"
    wait: yes
    group: jenkins
    count: 1
    region: us-east-2
    security_group: 'Jenkins Security Group'
    ansible_python_interpreter: /usr/bin/python3
    place: '99.99.99.99'
    ansible_python_interpreter: /usr/bin/python3

  tasks:
  - name: create key pair
    amazon.aws.ec2_key:
      name: "{{ project_name }}-{{ env }}-key7"
    register: ec2_key

  - name: launch_EC2
    ec2:
      key_name: "{{ project_name }}-{{ env }}-key7"
      region: "{{ region }}"
      group: "{{ security_group }}"
      instance_type: "{{ instance_type }}"
      image: "{{ image }}"
      wait: yes
      count: "{{ count }}"
      instance_tags: {"Name":"AnsibleArtifactory"}
    register: ec2
  - name: Describe EC2
    shell: aws ec2 describe-instances --filters "Name=tag:Name,Values=AnsibleArtifactory" >> EC2info.txt
    ignore_errors: true
   #write ip to file
  - name: get IP
    shell: |
      echo $txt > NeatOutput.txt
      grep "^ASSOCIATION" EC2info.txt | awk -F ' ' '{ print $4}' | awk 'END{print}' >> NeatOutput.txt
      tr '\n' ' ' < NeatOutput.txt > NeatOutput2.txt
    environment:
      txt: "ip_address: "
  - name: read_in_vars
    include_vars:
      file: NeatOutput2.txt
      name: ip
  - name: set ip
    set_fact:
      place: "{{ item.value }}"
    with_dict: "{{ ip }}"
  
  - name: add instances to host group
    add_host:
      name: "{{ place }}"
      groups: Artifactory

  - name: wait for ssh
    local_action: wait_for
                  host={{ item.public_ip }}
                  port=22
                  state=started
    with_items: "{{ec2.instances}}"
    
  - name: update / replace rt53 record to point to this ec2
    community.aws.route53:
      state: present
      zone: hitec.link
      record: cb-artifactory.hitec.link
      type: A
      ttl: 300
      value: "{{ place }}"
      wait: yes

- hosts: Artifactory
  remote_user: ec2-user
  gather_facts: False
    
  tasks:
  - name: Enable Docker
    shell: |
      sudo amazon-linux-extras enable docker=latest -Y
      sudo yum clean metadata
      sudo yum install docker -y
      sudo systemctl start docker
      sudo usermod -a -G docker ec2-user
  - name: prepare directories to be mounted
    shell: |
      sudo cd /
      sudo mkdir -p $JFROG_OSS/artifactory/var/etc
      zone: hitec.link
      sudo mkdir -p $JFROG_CE/artifactory/var/etc
      
      cd $JFROG_OSS/artifactory/var/etc
      sudo touch ./system.yaml
      sudo chown -R 1030:1030 $JFROG_OSS/artifactory/var
      sudo chmod -R 777 $JFROG_OSS/artifactory/var

      cd $JFROG_CE/artifactory/var/etc
      sudo touch ./system.yaml
      sudo chown -R 1030:1030 $JFROG_CE/artifactory/var
      sudo chmod -R 777 $JFROG_CE/artifactory/var
    environment:
      JFROG_OSS: '/artifactoryOSS'
      JFROG_CE: '/artifactoryCE'
  - name: run containers
    shell: |
      docker run --name artifactory-ce -e http_proxy="" -e https_proxy="" -e HTTP_PROXY="" -e HTTPS_PROXY="" -v $JFROG_CE/artifactory/var/:/var/opt/jfrog/artifactory -d -p 8081:8081 -p 8082:8082 releases-docker.jfrog.io/jfrog/artifactory-cpp-ce:latest
      docker run --name artifactory-oss -e http_proxy="" -e https_proxy="" -e HTTP_PROXY="" -e HTTPS_PROXY="" -v $JFROG_OSS/artifactory/var/:/var/opt/jfrog/artifactory -d -p 9081:8081 -p 9082:8082 releases-docker.jfrog.io/jfrog/artifactory-oss:latest
  - name: Per-boot script to start docker / artifactory instances
    shell: |
      cd /home/ec2-user
      sudo echo -e '#!/bin/bash\nsudo systemctl start docker\nsudo docker start artifactory-ce\nsudo docker start artifactory-oss' > AutostartDockerInstances.sh
      sudo chmod u+x AutostartDockerInstances.sh
      sudo cp AutostartDockerInstances.sh /var/lib/cloud/scripts/per-boot
